//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("SERVER_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserStatus {
  INVITED
  VERIFIED
}

/// @@auth
/// @@allow('all', auth().id == this.id)
/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('create', globalRole != 'ADMIN')
/// @@allow('read', true)
model User {
  id                String             @id() @default(uuid())
  name              String?
  email             String?            @unique()
  pictureUrl        String?            @default("https://i.imgur.com/ZdJSK3Y.jpeg")
  tokenInvitation   String?
  stripeCustomerId  String?
  status            UserStatus         @default(VERIFIED)
  globalRole        String             @default("USER")
  /// @password
  /// @omit
  password          String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @default(now()) @updatedAt()
  organizationRoles OrganizationRole[]
  pwaSubscriptions  PwaSubscription[]  @relation("user")
  products          Product[]          @relation("user")
  orders            Order[]            @relation("user")
  customOrders      CustomOrder[]      @relation("user")
  bids              Bid[]              @relation("user")
  donations         Donation[]         @relation("user")
}

/// @@allow('all', true)
model Product {
  id             String        @id() @default(uuid())
  name           String
  description    String?
  price          String
  size           String?
  category       String?
  status         String
  quantity       Float
  pictureUrl     String?
  organizationId String
  organization   Organization? @relation(fields: [organizationId], references: [id], name: "organization")
  userId         String
  user           User?         @relation(fields: [userId], references: [id], name: "user")
  orderItems     OrderItem[]   @relation("product")
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Order {
  id             String        @id() @default(uuid())
  status         String
  total          String
  type           String
  organizationId String
  organization   Organization? @relation(fields: [organizationId], references: [id], name: "organization")
  userId         String
  user           User?         @relation(fields: [userId], references: [id], name: "user")
  orderItems     OrderItem[]   @relation("order")
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now()) @updatedAt()
}

/// @@allow('all', true)
model OrderItem {
  id        String   @id() @default(uuid())
  quantity  Float
  price     String
  orderId   String
  order     Order?   @relation(fields: [orderId], references: [id], name: "order")
  productId String
  product   Product? @relation(fields: [productId], references: [id], name: "product")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model CustomOrder {
  id             String        @id() @default(uuid())
  description    String
  deadline       String
  status         String
  organizationId String
  organization   Organization? @relation(fields: [organizationId], references: [id], name: "organization")
  userId         String
  user           User?         @relation(fields: [userId], references: [id], name: "user")
  bids           Bid[]         @relation("customOrder")
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Bid {
  id            String       @id() @default(uuid())
  price         String
  timeline      String
  status        String
  customOrderId String
  customOrder   CustomOrder? @relation(fields: [customOrderId], references: [id], name: "customOrder")
  userId        String
  user          User?        @relation(fields: [userId], references: [id], name: "user")
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Donation {
  id             String        @id() @default(uuid())
  description    String
  pickupTime     String
  status         String
  kindnessPoints Float
  organizationId String
  organization   Organization? @relation(fields: [organizationId], references: [id], name: "organization")
  userId         String
  user           User?         @relation(fields: [userId], references: [id], name: "user")
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now()) @updatedAt()
}

/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('all', roles?[user == auth() && name == 'owner'])
/// @@allow('read', roles?[user == auth()])
model Organization {
  id               String             @id() @default(uuid())
  name             String
  pictureUrl       String?            @default("https://i.imgur.com/BgkFiid.jpeg")
  stripeCustomerId String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now()) @updatedAt()
  roles            OrganizationRole[]
  products         Product[]          @relation("organization")
  orders           Order[]            @relation("organization")
  customOrders     CustomOrder[]      @relation("organization")
  donations        Donation[]         @relation("organization")
}

/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('all', organization.roles?[user == auth() && name == 'owner'])
/// @@allow('create', organization.roles?[user == auth()] && name != 'owner')
/// @@allow('read', organization.roles?[user == auth()])
/// @@allow('delete', auth() == user)
model OrganizationRole {
  id             String       @id() @default(uuid())
  name           String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt()
  userId         String
  user           User         @relation(fields: [userId], references: [id])
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

/// @@allow('all', true)
model PwaSubscription {
  id        String   @id() @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt()
  userId    String
  user      User     @relation(fields: [userId], references: [id], name: "user")
}
